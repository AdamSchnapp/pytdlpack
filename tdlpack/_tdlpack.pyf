!    -*- f90 -*-
! Note: the context of this file is case sensitive.

subroutine bswap(nval) ! in bswap.f
    real :: nval
end subroutine bswap
subroutine ckfilend(kfildo,funit,fname,isysend,ifilend,convertx,ier) ! in ckfilend.f
    integer :: kfildo
    integer :: funit
    character*60 :: fname
    integer :: isysend
    integer :: ifilend
    character*20 :: convertx
    integer :: ier
end subroutine ckfilend
subroutine ckraend(kfildo,kfilx,cfilx,isysend,ifilend,convertx,ier) ! in ckraend.f
    integer :: kfildo
    integer :: kfilx
    character*60 :: cfilx
    integer :: isysend
    integer :: ifilend
    character*20 :: convertx
    integer :: ier
end subroutine ckraend
subroutine cksysend(kfildo,cprint,isysend,ier) ! in cksysend.f
    integer :: kfildo
    character*10 :: cprint
    integer :: isysend
    integer :: ier
end subroutine cksysend
subroutine closefile(lun,ier) ! in closefile.f
    integer intent(in) :: lun
    integer intent(out) :: ier
end subroutine closefile
subroutine openfile(file,mode,lun,byteorder,ftype) ! in openfile.f
    character*(*) intent(in) :: file
    character*(*) intent(in) :: mode
    integer intent(out) :: lun
    integer intent(out) :: byteorder
    integer intent(out) :: ftype
end subroutine openfile
subroutine pack(kfildo,ic,nxy,is0,is1,is2,is4,nd7,ipack,nd5,second,ifirst,ifod,missp,misss,minpk,lx,ioctet,l3264b,ier) ! in pack.f
    integer :: kfildo
    integer dimension(nxy) :: ic
    integer, optional,check(len(ic)>=nxy),depend(ic) :: nxy=len(ic)
    integer dimension(nd7) :: is0
    integer dimension(nd7),depend(nd7) :: is1
    integer dimension(nd7),depend(nd7) :: is2
    integer dimension(nd7),depend(nd7) :: is4
    integer, optional,check(len(is0)>=nd7),depend(is0) :: nd7=len(is0)
    integer dimension(nd5) :: ipack
    integer, optional,check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
    logical :: second
    integer :: ifirst
    integer :: ifod
    integer :: missp
    integer :: misss
    integer :: minpk
    integer :: lx
    integer :: ioctet
    integer :: l3264b
    integer :: ier
end subroutine pack
subroutine pack1d(kfildo,a,ic,nsta,is0,is1,is2,is4,nd7,xmissp,xmisss,ipack,nd5,minpk,lx,ioctet,l3264b,ier) ! in pack1d.f
    integer :: kfildo
    real dimension(nsta) :: a
    integer dimension(nsta),depend(nsta) :: ic
    integer, optional,check(len(a)>=nsta),depend(a) :: nsta=len(a)
    integer dimension(nd7) :: is0
    integer dimension(nd7),depend(nd7) :: is1
    integer dimension(nd7),depend(nd7) :: is2
    integer dimension(nd7),depend(nd7) :: is4
    integer, optional,check(len(is0)>=nd7),depend(is0) :: nd7=len(is0)
    real :: xmissp
    real :: xmisss
    integer dimension(nd5) :: ipack
    integer, optional,check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
    integer :: minpk
    integer :: lx
    integer :: ioctet
    integer :: l3264b
    integer :: ier
end subroutine pack1d
subroutine pack2d(kfildo,a,ia,ic,nx,ny,is0,is1,is2,is4,nd7,xmissp,xmisss,ipack,nd5,minpk,lx,ioctet,l3264b,ier) ! in pack2d.f
    integer :: kfildo
    real dimension(nx,ny) :: a
    integer dimension(nx,ny),depend(nx,ny) :: ia
    integer dimension(nx*ny),depend(nx,ny) :: ic
    integer, optional,check(shape(a,0)==nx),depend(a) :: nx=shape(a,0)
    integer, optional,check(shape(a,1)==ny),depend(a) :: ny=shape(a,1)
    integer dimension(nd7) :: is0
    integer dimension(nd7),depend(nd7) :: is1
    integer dimension(nd7),depend(nd7) :: is2
    integer dimension(nd7),depend(nd7) :: is4
    integer, optional,check(len(is0)>=nd7),depend(is0) :: nd7=len(is0)
    real :: xmissp
    real :: xmisss
    integer dimension(nd5) :: ipack
    integer, optional,check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
    integer :: minpk
    integer :: lx
    integer :: ioctet
    integer :: l3264b
    integer :: ier
end subroutine pack2d
subroutine packgp(kfildo,ic,nxy,minpk,inc,missp,misss,jmin,jmax,lbit,nov,ndg,lx,ibit,jbit,kbit) ! in packgp.f
    integer :: kfildo
    integer dimension(nxy) :: ic
    integer, optional,check(len(ic)>=nxy),depend(ic) :: nxy=len(ic)
    integer :: minpk
    integer :: inc
    integer :: missp
    integer :: misss
    integer dimension(ndg) :: jmin
    integer dimension(ndg),depend(ndg) :: jmax
    integer dimension(ndg),depend(ndg) :: lbit
    integer dimension(ndg),depend(ndg) :: nov
    integer, optional,check(len(jmin)>=ndg),depend(jmin) :: ndg=len(jmin)
    integer :: lx
    integer :: ibit
    integer :: jbit
    integer :: kbit
end subroutine packgp
subroutine pkbg(kfildo,ipack,nd5,loc,ipos,nvalue,nbit,l3264b,ier,e__e) ! in pkbg.f
    integer :: kfildo
    integer dimension(nd5) :: ipack
    integer, optional,check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
    integer :: loc
    integer :: ipos
    integer :: nvalue
    integer :: nbit
    integer :: l3264b
    integer :: ier
    real :: e__e
end subroutine pkbg
subroutine pkc4lx(kfildo,ipack,ndx,loc,ipos,ic,nxy,nov,lbit,lx,l3264b,ier) ! in pkc4lx.f
    integer :: kfildo
    integer dimension(ndx) :: ipack
    integer, optional,check(len(ipack)>=ndx),depend(ipack) :: ndx=len(ipack)
    integer :: loc
    integer :: ipos
    integer dimension(nxy) :: ic
    integer, optional,check(len(ic)>=nxy),depend(ic) :: nxy=len(ic)
    integer dimension(lx) :: nov
    integer dimension(lx),depend(lx) :: lbit
    integer, optional,check(len(nov)>=lx),depend(nov) :: lx=len(nov)
    integer :: l3264b
    integer :: ier
end subroutine pkc4lx
subroutine pkms00(kfildo,is1,nd7,ic,nxy,minpk,inc,missp,misss,jmax,jmin,lbit,nov,ndg,lx,ibit,jbit,kbit,mina) ! in pkms00.f
    integer :: kfildo
    integer dimension(nd7) :: is1
    integer, optional,check(len(is1)>=nd7),depend(is1) :: nd7=len(is1)
    integer dimension(nxy) :: ic
    integer, optional,check(len(ic)>=nxy),depend(ic) :: nxy=len(ic)
    integer :: minpk
    integer :: inc
    integer :: missp
    integer :: misss
    integer dimension(ndg) :: jmax
    integer dimension(ndg),depend(ndg) :: jmin
    integer dimension(ndg),depend(ndg) :: lbit
    integer dimension(ndg),depend(ndg) :: nov
    integer, optional,check(len(jmax)>=ndg),depend(jmax) :: ndg=len(jmax)
    integer :: lx
    integer :: ibit
    integer :: jbit
    integer :: kbit
    integer :: mina
end subroutine pkms00
subroutine pkms97(kfildo,is1,nd7,ic,nxy,minpk,inc,missp,misss,jmax,jmin,lbit,nov,ndg,lx,ibit,jbit,kbit,mina,ier) ! in pkms97.f
    integer :: kfildo
    integer dimension(nd7) :: is1
    integer, optional,check(len(is1)>=nd7),depend(is1) :: nd7=len(is1)
    integer dimension(nxy) :: ic
    integer, optional,check(len(ic)>=nxy),depend(ic) :: nxy=len(ic)
    integer :: minpk
    integer :: inc
    integer :: missp
    integer :: misss
    integer dimension(ndg) :: jmax
    integer dimension(ndg),depend(ndg) :: jmin
    integer dimension(ndg),depend(ndg) :: lbit
    integer dimension(ndg),depend(ndg) :: nov
    integer, optional,check(len(jmax)>=ndg),depend(jmax) :: ndg=len(jmax)
    integer :: lx
    integer :: ibit
    integer :: jbit
    integer :: kbit
    integer :: mina
    integer :: ier
end subroutine pkms97
subroutine pkms99(kfildo,is1,nd7,ic,nxy,minpk,inc,missp,misss,jmax,jmin,lbit,nov,ndg,lx,ibit,jbit,kbit,mina,ier) ! in pkms99.f
    integer :: kfildo
    integer dimension(nd7) :: is1
    integer, optional,check(len(is1)>=nd7),depend(is1) :: nd7=len(is1)
    integer dimension(nxy) :: ic
    integer, optional,check(len(ic)>=nxy),depend(ic) :: nxy=len(ic)
    integer :: minpk
    integer :: inc
    integer :: missp
    integer :: misss
    integer dimension(ndg) :: jmax
    integer dimension(ndg),depend(ndg) :: jmin
    integer dimension(ndg),depend(ndg) :: lbit
    integer dimension(ndg),depend(ndg) :: nov
    integer, optional,check(len(jmax)>=ndg),depend(jmax) :: ndg=len(jmax)
    integer :: lx
    integer :: ibit
    integer :: jbit
    integer :: kbit
    integer :: mina
    integer :: ier
end subroutine pkms99
subroutine pks4lx(kfildo,ipack,ndx,loc,ipos,ic,nxy,nbit,l3264b,ier) ! in pks4lx.f
    integer :: kfildo
    integer dimension(ndx) :: ipack
    integer, optional,check(len(ipack)>=ndx),depend(ipack) :: ndx=len(ipack)
    integer :: loc
    integer :: ipos
    integer dimension(nxy) :: ic
    integer, optional,check(len(ic)>=nxy),depend(ic) :: nxy=len(ic)
    integer :: nbit
    integer :: l3264b
    integer :: ier
end subroutine pks4lx
subroutine readfile(lun,nd5,ipack,ioctet,ier) ! in readfile.f
    integer intent(in) :: lun
    integer intent(in) :: nd5
    integer dimension(nd5),intent(out),depend(nd5) :: ipack
    integer(kind=8) intent(out) :: ioctet
    integer intent(out) :: ier
end subroutine readfile
subroutine writefile(lun,nd5,ioctet,ipack,ier) ! in readfile.f
    integer intent(in) :: lun
    integer, optional,intent(in),check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
    integer(kind=8) intent(in) :: ioctet
    integer dimension(nd5),intent(in) :: ipack
    integer intent(out) :: ier
end subroutine writefile
subroutine reduce(kfildo,jmin,jmax,lbit,nov,lx,ndg,ibit,jbit,kbit,novref,ibxx2,ier) ! in reduce.f
    integer :: kfildo
    integer dimension(ndg) :: jmin
    integer dimension(ndg),depend(ndg) :: jmax
    integer dimension(ndg),depend(ndg) :: lbit
    integer dimension(ndg),depend(ndg) :: nov
    integer :: lx
    integer, optional,check(len(jmin)>=ndg),depend(jmin) :: ndg=len(jmin)
    integer :: ibit
    integer :: jbit
    integer :: kbit
    integer :: novref
    integer dimension(31) :: ibxx2
    integer :: ier
end subroutine reduce
subroutine unpack(kfildo,ipack,iwork,data,nd5,is0,is1,is2,is4,nd7,misspx,misssx,igive,l3264b,ier) ! in unpack.f
    integer :: kfildo
    integer dimension(nd5) :: ipack
    integer dimension(nd5),depend(nd5) :: iwork
    real dimension(nd5),depend(nd5) :: data
    integer, optional,check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
    integer dimension(nd7) :: is0
    integer dimension(nd7),depend(nd7) :: is1
    integer dimension(nd7),depend(nd7) :: is2
    integer dimension(nd7),depend(nd7) :: is4
    integer, optional,check(len(is0)>=nd7),depend(is0) :: nd7=len(is0)
    integer :: misspx
    integer :: misssx
    integer :: igive
    integer :: l3264b
    integer :: ier
end subroutine unpack
subroutine unpkbg(kfildo,ipack,nd5,loc,ipos,nvalue,nbit,l3264b,ier,e__e) ! in unpkbg.f
    integer :: kfildo
    integer dimension(nd5) :: ipack
    integer, optional,check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
    integer :: loc
    integer :: ipos
    integer :: nvalue
    integer :: nbit
    integer :: l3264b
    integer :: ier
    real :: e__e
end subroutine unpkbg
subroutine unpklx(kfildo,ipack,ndx,loc,ipos,ic,nxy,nbit,l3264b,ier) ! in unpklx.f
    integer :: kfildo
    integer dimension(ndx) :: ipack
    integer, optional,check(len(ipack)>=ndx),depend(ipack) :: ndx=len(ipack)
    integer :: loc
    integer :: ipos
    integer dimension(nxy) :: ic
    integer, optional,check(len(ic)>=nxy),depend(ic) :: nxy=len(ic)
    integer :: nbit
    integer :: l3264b
    integer :: ier
end subroutine unpklx
subroutine unpkoo(kfildo,ipack,nd5,loc,ipos,mina,jmin,lbit,nov,lx,iwork,l3264b,ier) ! in unpkoo.f
    integer :: kfildo
    integer dimension(nd5) :: ipack
    integer, optional,check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
    integer :: loc
    integer :: ipos
    integer :: mina
    integer dimension(lx) :: jmin
    integer dimension(lx),depend(lx) :: lbit
    integer dimension(lx),depend(lx) :: nov
    integer, optional,check(len(jmin)>=lx),depend(jmin) :: lx=len(jmin)
    integer dimension(nd5),depend(nd5) :: iwork
    integer :: l3264b
    integer :: ier
end subroutine unpkoo
subroutine unpkpo(kfildo,ipack,nd5,loc,ipos,missp,mina,jmin,lbit,nov,lx,iwork,l3264b,ier) ! in unpkpo.f
    integer :: kfildo
    integer dimension(nd5) :: ipack
    integer, optional,check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
    integer :: loc
    integer :: ipos
    integer :: missp
    integer :: mina
    integer dimension(lx) :: jmin
    integer dimension(lx),depend(lx) :: lbit
    integer dimension(lx),depend(lx) :: nov
    integer, optional,check(len(jmin)>=lx),depend(jmin) :: lx=len(jmin)
    integer dimension(nd5),depend(nd5) :: iwork
    integer :: l3264b
    integer :: ier
end subroutine unpkpo
subroutine unpkps(kfildo,ipack,nd5,loc,ipos,missp,misss,mina,jmin,lbit,nov,lx,iwork,l3264b,ier) ! in unpkps.f
    integer :: kfildo
    integer dimension(nd5) :: ipack
    integer, optional,check(len(ipack)>=nd5),depend(ipack) :: nd5=len(ipack)
    integer :: loc
    integer :: ipos
    integer :: missp
    integer :: misss
    integer :: mina
    integer dimension(lx) :: jmin
    integer dimension(lx),depend(lx) :: lbit
    integer dimension(lx),depend(lx) :: nov
    integer, optional,check(len(jmin)>=lx),depend(jmin) :: lx=len(jmin)
    integer dimension(nd5),depend(nd5) :: iwork
    integer :: l3264b
    integer :: ier
end subroutine unpkps
subroutine writep(kfildo,kfilio,ipack,nwords,ntotby,ntotrc,l3264b,ier) ! in writep.f
    integer :: kfildo
    integer :: kfilio
    integer dimension(nwords) :: ipack
    integer, optional,check(len(ipack)>=nwords),depend(ipack) :: nwords=len(ipack)
    integer :: ntotby
    integer :: ntotrc
    integer :: l3264b
    integer :: ier
end subroutine writep

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
